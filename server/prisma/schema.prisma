generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}



model User {
  id               String     @id @default(uuid()) @map("userid")
  email            String     @unique
  fullName         String?    // Made optional
  username         String     @unique
  phoneNumber      String?    @unique
  password         String
  withdrawalPassword String   // Added (plain text)
  referralCode     String     @unique
  referredBy       String?
  role             String     @default("user") // 'user' or 'admin'
  balance          Float      @default(0)
  profitBalance    Float      @default(0)
  taskLimit        Int        @default(5)
  isBlocked        Boolean    @default(false)
  nextTaskNumber   Int        @default(1)
  
  // Timestamps
  taskWindowStart  DateTime?
  lastProfitCalc   DateTime?
  lastTaskRefresh  DateTime?
  lastLogin        DateTime?
  createdAt        DateTime   @default(now())

  // Profile fields
  withdrawalAddress String?
  profilePicture    String?
  canReceiveTasks Boolean  @default(true)
  deactivatedAt  DateTime?

  // Relations
  profile          Profile?
  withdrawals      Withdrawal[]
  deposits         Deposit[]
  userTasks        UserTask[]

  // Add index for better query performance
  @@index([email])
  @@index([username])
  @@index([phoneNumber])
  @@index([referralCode])
}

model VipLevel {
  level          Int       @id
  name           String?
  profitPerOrder Float     @default(0.0)
  appsPerSet     Int
  minBalance     Float
  createdAt      DateTime  @default(now())
  profiles       Profile[]
}

model Investment {
  id             String    @id @default(uuid())
  userId         String
  amount         Float
  startDate      DateTime  @default(now())
  lastProfitDate DateTime?
}

model EarningsHistory {
  id     String   @id @default(uuid())
  userId String
  amount Float
  date   DateTime @default(now())
  type   String   @default("daily") // daily, app_review, bonus, etc.
  taskId String?  // Reference to app review task if applicable
}

model Withdrawal {
  id              String   @id @default(uuid())
  userId          String
  amount          Float
  address         String
  status          String   @default("pending") // pending/completed/failed
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  user            User     @relation(fields: [userId], references: [id])
}

model Profile {
  id            String   @id @default(uuid())
  userId        String   @unique
  vipLevel      Int?      @default(0)
  totalInvested Float    @default(0)
   dailyTasksCompleted Int    @default(0)
  dailyTasksLimit     Int    @default(5)
  lastTaskReset       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vipLevelData VipLevel? @relation(fields: [vipLevel], references: [level])
}

model Deposit {
  id          String   @id @default(uuid())
  userId      String
  amount      Float
  txHash      String?
  currency    String?
  proofImage   String?
  status      String   @default("pending") // pending/verified/rejected
  createdAt   DateTime @default(now())
  verifiedAt  DateTime?
  
  user        User     @relation(fields: [userId], references: [id])
}

model AdminWallet {
  id          String   @id @default(uuid())
  currency    String   // BTC, ETH, USDT, etc
  address     String
  network     String?  // Mainnet, TRC20, ERC20, etc
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  message     String
  isRead      Boolean  @default(false)
  type        String   @default("info") // info, warning, success, error
  createdAt   DateTime @default(now())
}



model Product {
  id               String     @id @default(uuid())
  name             String
  image            String
  reviewText       String
  defaultProfit    Float
  defaultDeposit   Float?     // If set, creates forced task
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userTasks        UserTask[]
}


enum UserTaskStatus {
  pending
  completed
  rejected
  assigned  // default state after assignment
}




model UserTask {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  product          Product        @relation(fields: [productId], references: [id])
  productId        String
  status           UserTaskStatus @default(assigned)
  taskNumber       Int            // Per-user ordering
  profitAmount     Float          // Final profit to award user (can be default or custom)
  depositAmount    Float?         // Final deposit required for forced task (can be default or custom)
  isForced         Boolean        @default(false)
  depositStatus    String?        // 'pending', 'approved', 'rejected' â€“ for forced tasks
  isActive         Boolean        @default(true) // Soft delete
  createdAt        DateTime       @default(now())
}





model AppSettings {
  id                Int       @id @default(1)
  totalSignupTasks  Int       @default(40)
  signupBonus       Float     @default(10)
  totalSignupBonus  Int       @default(12)
  bitcoinWallet     String?
  ethereumWallet    String?
  usdtWallet       String?
  updatedAt        DateTime  @updatedAt
}

