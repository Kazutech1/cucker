generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(uuid()) @map("userid")
  email        String   @unique
  fullName     String
  username     String   @unique
  phoneNumber  String?   @unique
  password     String
  referralCode String   @unique
  referredBy   String?
  role         String   @default("user") // 'user' or 'admin'
  balance      Float    @default(0)
  profitBalance Float   @default(0)
  withdrawalAddress String?
  profilePicture String?
  lastProfitCalc DateTime?
  lastLogin    DateTime?  // Add this new field
  createdAt    DateTime @default(now())

  // Relations
  profile     Profile?
  withdrawal Withdrawal[]
  deposit    Deposit[]
  taskHistory  TaskHistory[]
  // userTasks   UserTask[]
  taskAssignments TaskAssignment[]
}

model VipLevel {
  level          Int       @id
  name           String?
  profitPerOrder Float     @default(0.0)
  appsPerSet     Int
  minBalance     Float
  createdAt      DateTime  @default(now())
  profiles       Profile[]
}

model Investment {
  id             String    @id @default(uuid())
  userId         String
  amount         Float
  startDate      DateTime  @default(now())
  lastProfitDate DateTime?
}

model EarningsHistory {
  id     String   @id @default(uuid())
  userId String
  amount Float
  date   DateTime @default(now())
  type   String   @default("daily") // daily, app_review, bonus, etc.
  taskId String?  // Reference to app review task if applicable
}

model Withdrawal {
  id              String   @id @default(uuid())
  userId          String
  amount          Float
  address         String
  status          String   @default("pending") // pending/completed/failed
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  user            User     @relation(fields: [userId], references: [id])
}

model Profile {
  id            String   @id @default(uuid())
  userId        String   @unique
  vipLevel      Int?      @default(0)
  totalInvested Float    @default(0)
   dailyTasksCompleted Int    @default(0)
  dailyTasksLimit     Int    @default(5)
  lastTaskReset       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vipLevelData VipLevel? @relation(fields: [vipLevel], references: [level])
}

model Deposit {
  id          String   @id @default(uuid())
  userId      String
  amount      Float
  txHash      String?
  proofImage   String?
  status      String   @default("pending") // pending/verified/rejected
  createdAt   DateTime @default(now())
  verifiedAt  DateTime?
  
  user        User     @relation(fields: [userId], references: [id])
}

model AdminWallet {
  id          String   @id @default(uuid())
  currency    String   // BTC, ETH, USDT, etc
  address     String
  network     String?  // Mainnet, TRC20, ERC20, etc
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  message     String
  isRead      Boolean  @default(false)
  type        String   @default("info") // info, warning, success, error
  createdAt   DateTime @default(now())
}

// NEW TASK SYSTEM MODELS

// model Task {
//   id          String   @id @default(uuid())
//   appName     String
//   appImage    String   // URL to app image
//   appReview   String
//   appProfit   Float
//   isActive    Boolean  @default(true)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Relations
//   taskAssignments TaskAssignment[]
//   userTasks       UserTask[]
// }

// model TaskAssignment {
//   id          String   @id @default(uuid())
//   userId      String
//   taskId      String
//   assignedAt  DateTime @default(now())
//   expiresAt   DateTime
//   isCompleted Boolean  @default(false)
//   completedAt DateTime?

//   // Relations
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

//   @@unique([userId, taskId])
// }

// model UserTask {
//   id          String   @id @default(uuid())
//   userId      String
//   taskId      String
//   status      String   @default("pending") // pending, completed
//   completedAt DateTime?
//   profit      Float
//   createdAt   DateTime @default(now())

//   // Relations
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
// }

// model TaskSettings {
//   id              String   @id @default(uuid())
//   dailyTaskLimit  Int      @default(5)
//   resetHours      Int      @default(24)
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }

model Task {
  id          String    @id @default(uuid())
  appName     String
  appImage    String
  appReview   String
  appProfit   Float
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignments TaskAssignment[]
  taskHistory  TaskHistory[]
}

model TaskAssignment {
  id          String   @id @default(uuid())
  taskId      String
  userId      String
  profitEarned Float?  // Track actual profit earned (in case appProfit changes)
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  
  // @@unique([taskId, userId])
}


model TaskHistory {
  id          String   @id @default(uuid())
  userId      String
  taskId      String
  taskName    String   // Snapshot of task name at completion
  profitEarned Float
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
}
